---
# File: roles/development/tasks/main.yml

#
# Editors
#

- name: add the full-featured versions of vim
  apt: name={{ item }} state=present
  with_items:
    - vim
    - vim-gnome
  tags:
    - editors
    - vim

- name: add the typora signing key
  apt_key: keyserver=keyserver.ubuntu.com id=BA300B7755AFCFAE
           state=present
  tags:
    - editors

- name: add the typora repository
  apt_repository: repo='deb https://typora.io linux/'
                  state=present
                  mode=644
  tags:
    - editors

- name: update the repository cache
  apt: update_cache=yes
  tags:
    - editors

- name: install typora
  apt: pkg=typora state=present
  tags:
    - editors

#
# Virtualization
#

- name: install virtualization tools
  apt: name={{ item }} state=latest
  with_items:
#    - ansible
    - vagrant
    - virtualbox
  tags:
    - virtualization

#
# Containerization
#

- name: install docker for container execution environment
  apt: name=docker.io state=latest
  tags:
    - containerization
    - docker

- name: create the installation directory for Kubernetes
  file: name={{ k8s_installation_directory }} state="directory"
  tags:
    - containerization
    - kubernetes

- name: download the Kubernetes release package
  uri: url={{ k8s_url }}
       dest=~/{{ k8s_tar_file }}
       creates=~/{{ k8s_tar_file }}
  register: download_result
  tags:
    - containerization
    - kubernetes

- name: unarchive the Kubernetes release
  unarchive: copy=no
             src=~/{{ k8s_tar_file }}
             dest={{ k8s_installation_directory }}
             creates={{ k8s_home_directory }}
#  when: download_result | changed
  register: unarchive_result
  tags:
    - containerization
    - kubernetes

- name: move the unarchived files to the standard location
  command: mv {{ k8s_tar_directory }} {{ k8s_home_directory }}
  when: unarchive_result | changed
  tags:
    - containerization
    - kubernetes

- name: create a pretty symlink to the latest Kubernetes version
  file: src={{ k8s_home_directory }}
        path={{ k8s_installation_directory }}/latest
        state=link
  when: unarchive_result | changed
  tags:
    - containerization
    - kubernetes

- name: fix the group 
  file: path={{ k8s_home_directory }}
        recurse=yes
        state=directory
        group=docker
  tags:
    - containerization
    - kubernetes

- name: install the Kubernetes binaries (server and client)
  shell: export KUBERNETES_SKIP_CONFIRM=true && ./cluster/get-kube-binaries.sh
         chdir={{ k8s_installation_directory }}/latest
         creates=./client/bin/
  tags:
    - containerization
    - kubernetes


- name: put kubectl on the user's path
  file: src={{ k8s_installation_directory }}/latest/client/bin/kubectl
        path=/usr/bin/kubectl
        state=link
  tags:
    - containerization
    - kubernetes

#
# HyperKube is now deprecated in favor of MiniKube
#

- name: remove the directory for the convenience scripts
  file: name={{ k8s_installation_directory }}/scripts state=directory
        state=absent
  tags:
    - containerization
    - kubernetes

- name: remove scripts from the user's path
  file: path={{ item }}
        state=absent
  with_items:
    - /usr/bin/kube-up
    - /usr/bin/kube-down
  tags:
    - containerization
    - kubernetes

- name: create the installation directory for MiniKube
  file: name={{ minikube_home_directory }} state=directory
  tags:
    - containerization
    - kubernetes
    - minikube

- name: download the MiniKube executable
  uri: url={{ minikube_url }}
       dest="{{ minikube_home_directory }}/{{ minikube_file }}"
       creates="{{ minikube_home_directory }}/{{ minikube_file }}"
       mode=755
  register: download_result
  tags:
    - containerization
    - kubernetes
    - minikube

- name: create a pretty symlink to the latest MiniKube version
  file: src={{ minikube_home_directory }}
        path={{ minikube_installation_directory }}/latest
        state=link
  when: download_result | changed
  tags:
    - containerization
    - kubernetes
    - minikube

- name: put minikube on the user's path
  file: src={{ minikube_installation_directory }}/latest/{{ minikube_file }}
        path=/usr/bin/minikube
        state=link
  tags:
    - containerization
    - kubernetes
    - minikube

#
# Source Code Management
#

- name: install linux tools for git
  apt: name={{ item }} state=latest
  with_items:
    - git
    - git-doc
    - git-svn
  tags:
    - git

- name: install linux tools for Subversion
  apt: name={{ item }} state=latest
  with_items:
    - subversion
    - libsvn-java
  tags:
    - subversion
    
#
# Build tools
#

- name: install Java build tools
  apt: name={{ item }} state=latest
  with_items:
    - ant
    - gradle
    - maven
    - nodejs-legacy

#
# File formating tools
#

- name: install file formating tools
  apt: name={{ item }} state=latest
  with_items:
    - python-demjson

#
# LDAP tools
#

- name: install linux tools for LDAP
  apt: name={{ item }} state=latest
  with_items:
    - ldap-utils
  tags:
    - ldap

#
# Networking
#

- name: add packages that are useful when developing networking software
  apt: name={{ item }} state=latest
  with_items:
    - wireshark
    - zenmap
  tags:
    - networking

#
# Graphics
#

- name: add packages that are useful for designing UIs
  apt: name={{ item }} state=latest
  with_items:
    - gcolor2
    - gimp
    - inkscape
    - screenruler
  tags:
    - graphics

#
# Inform
#

- name: add packages needed to develop and run IF games
  apt: name={{ item }} state=latest
  with_items:
    - zoom-player
    - inform
    - inform-docs
  tags:
    - interactive-fiction
    - inform
